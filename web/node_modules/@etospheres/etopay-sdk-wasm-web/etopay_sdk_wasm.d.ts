/* tslint:disable */
/* eslint-disable */
export enum Currency {
  Iota = 0,
  Eth = 1,
}
export enum Level {
  Error = 0,
  Warn = 1,
  Info = 2,
  Debug = 3,
  Trace = 4,
}
export enum OfficialDocumentType {
  Passport = 0,
  DriversLicense = 1,
  Id = 2,
}
export enum Protocol {
  /**
   * Represents an EVM-based network (e.g., Ethereum)
   */
  Evm = 0,
  /**
   * Represents and EVM based ERC20 Smart Contract token
   */
  EvmERC20 = 1,
  /**
   * Iota Rebased network.
   */
  IotaRebased = 2,
}
export enum TxStatus {
  Pending = 0,
  WaitingForVerification = 1,
  Valid = 2,
  Invalid = 3,
  ProcessingIncoming = 4,
  ProcessingOutgoing = 5,
  Completed = 6,
  Failed = 7,
}
export enum ViviswapVerificationStatus {
  /**
   * The user is fully verified
   */
  Verified = 0,
  /**
   * The user is not verified
   */
  Unverified = 1,
  /**
   * The user is partially verified
   */
  PartiallyVerified = 2,
}
export enum ViviswapVerificationStep {
  /**
   * no verification step (no next verification step available)
   */
  Undefined = 0,
  /**
   * general verification step
   */
  General = 1,
  /**
   * personal verification step
   */
  Personal = 2,
  /**
   * residence verification step
   */
  Residence = 3,
  /**
   * identity verification step
   */
  Identity = 4,
  /**
   * amla general verification step
   */
  Amla = 5,
  /**
   * document verification step
   */
  Documents = 6,
}
export enum WalletTxStatus {
  Pending = 0,
  Confirmed = 1,
  Conflicting = 2,
}
export class ApplicationMetadata {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  product_hash: string;
  reason: string;
  purchase_model: string;
  app_data: string;
}
export class CaseDetailsResponse {
  private constructor();
  free(): void;
  case_id: string;
  archived: boolean;
  status: string;
}
/**
 * Main object that contains all the functionality for interfacing with the ETOPaySdk.
 */
export class ETOPaySdk {
  free(): void;
  /**
   * Create a new instance of the `ETOPaySdk`
   * @returns {ETOPaySdk} a new `ETOPaySdk` instance.
   */
  constructor();
  /**
   * Set the configuration as a JSON-encoded string.
   *
   * @param {String} config The input string representing the configuration.
   *
   * @example
   * ```json
   * {
   *     "auth_provider": "<authentication provider name>",
   *     "backend_url": "<valid URL to the backend API>",
   *     "storage_path": "/path/to/valid/folder",
   *     "log_level": "info",
   * }
   * ```
   *
   * @returns {Promise<void>}
   */
  setConfig(config: string): Promise<void>;
  /**
   * Selects the network for the ETOPay SDK.
   *
   * @param {String} network_key.
   * @returns {Promise<void>}
   */
  setNetwork(network_key: string): Promise<void>;
  /**
   * Fetch available networks.
   *
   * @returns {Option<Vec<Network>>} Sdk networks
   */
  getNetworks(): Promise<Network[]>;
  /**
   * Initializes the etopay logger
   * @param {Level} level - The log level.
   * @returns {void}
   */
  initLogger(level: Level): void;
  /**
   * Creates a new user for the SDK.
   *
   * @param {string} username - The input string representing the username.
   * @returns {Promise<void>}
   */
  createNewUser(username: string): Promise<void>;
  /**
   * Initializes an existing user in the SDK
   *
   * @param {string} username - The input string representing the username.
   * @returns {Promise<void>}
   */
  initializeUser(username: string): Promise<void>;
  /**
   * Refreshes the access token for the user in the SDK.
   *
   * @param {string} access_token - The input string representing the access token.
   * @returns {Promise<void>}
   */
  refreshAccessToken(access_token: string): Promise<void>;
  /**
   * Fetches the kyc verification status for the user
   *
   * @param {string} username - The input string representing the username.
   *
   * @returns {Promise<bool>} The kyc verification status as a boolean value
   */
  isKycVerified(username: string): Promise<boolean>;
  /**
   * Creates a new random wallet and returns the mnemonic.
   *
   * @param {string} pin - The input string representing the pin.
   * @returns {Promise<String>}
   */
  createNewWallet(pin: string): Promise<string>;
  /**
   * Initializes a wallet from an existing mnemonic.
   *
   * @param {string} pin - The input string representing the pin.
   * @param {string} mnemonic - The input string representing the mnemonic
   * @returns {Promise<void>}
   */
  createWalletFromMnemonic(pin: string, mnemonic: string): Promise<void>;
  /**
   * Creates a wallet from a backup.
   *
   * @param {string} pin - The input string representing the pin.
   * @param {Uint8Array} backup - The bytes of the backup file.
   * @param {string} backup_password - Password used to create the backup.
   *
   * @returns {Promise<void>}
   */
  createWalletFromBackup(pin: string, backup: Uint8Array, backup_password: string): Promise<void>;
  /**
   * Creates a wallet backup.
   *
   * @param {string} pin - The input string representing the pin.
   * @param {string} backup_password - Password used to create the backup.
   *
   * @returns {Promise<Uint8Array>}
   */
  createWalletBackup(pin: string, backup_password: string): Promise<Uint8Array>;
  /**
   * Deletes and existing wallet.
   *
   * @param {string} pin - The input string representing the pin.
   *
   * @returns {Promise<void>}
   */
  deleteWallet(pin: string): Promise<void>;
  /**
   * Verify if the provided mnemonic is the one stored in the wallet.
   *
   * @param {string} pin - The input string representing the pin.
   * @param {string} mnemonic - The input string representing the mnemonic.
   *
   * @returns {Promise<boolean>} - whether the mnemonics are the same or not.
   */
  verifyMnemonic(pin: string, mnemonic: string): Promise<boolean>;
  /**
   * Generate a new receiver address based on selected network in the config.
   *
   * @param {string} pin - The input string representing the pin.
   *
   * @returns {Promise<string>} The receiver wallet address as string
   */
  generateNewAddress(pin: string): Promise<string>;
  /**
   * Fetches the current balance of the base crypto network on the wallet
   *
   * @param {string} pin - The input string representing the pin.
   *
   * @returns {Promise<number>} The current balance as a double precision floating point number
   */
  getWalletBalance(pin: string): Promise<number>;
  /**
   * Initialize the KYC process for Postident
   *
   * @remarks
   * This method is only available if the SDK is compiled with support for postident.
   *    
   * @returns {Promise<string>} The ID of the new Postident KYC case.
   */
  startKycVerificationForPostident(): Promise<NewCaseIdResponse>;
  /**
   * Fetches the KYC details for the postident provider
   *
   * @remarks
   * This method is only available if the SDK is compiled with support for postident.
   *
   * @returns {Promise<CaseDetailsResponse>} The case details
   */
  getKycDetailsForPostident(): Promise<CaseDetailsResponse>;
  /**
   * Triggers the backend to update the KYC status in the postident KYC provider
   *
   * @remarks
   * This method is only available if the SDK is compiled with support for postident.
   *
   * @param {string} case_id - The input string representing the case_id to be updated
   * @returns {Promise<void>}
   */
  updateKycStatusForPostident(case_id: string): Promise<void>;
  /**
   * Creates a purchase request for buying an artefact
   *
   * @param receiver - The receiver of the purchase request.
   * @param amount - The amount of the purchase.
   * @param product_hash - The hash of the underlying product/artefact
   * @param app_data - The app data for the purchase. This is application specific string or stringified object data.
   * @param purchase_type - The type of the purchase. Either a COMPLIMENT or a PURCHASE
   *
   * @returns {Promise<string>} The purchase id of the created purchase request as string
   */
  createPurchaseRequest(receiver: string, amount: number, product_hash: string, app_data: string, purchase_type: string): Promise<string>;
  /**
   * Fetches the purchase details from the given purchase ID.
   *
   * @param {string} purchase_id - The purchase id to query to details.
   *
   * @returns {Promise<PurchseDetails>} The purchase details
   */
  getPurchaseDetails(purchase_id: string): Promise<PurchaseDetails>;
  /**
   * Confirm the purchase for the given purchase ID.
   *
   * @param {string} pin - The pin for confirmation of purchase
   * @param {string} purchase_id - The purchase id to confirm.
   * @returns {Promise<void>}
   */
  confirmPurchaseRequest(pin: string, purchase_id: string): Promise<void>;
  /**
   * Set the password to use for wallet operations. If the password was already set, this changes it.
   *
   * @param {string} pin - The pin used to encrypt the password
   * @param {string} new_password - The password to set for the wallet
   * @returns {Promise<void>}
   */
  setWalletPassword(pin: string, new_password: string): Promise<void>;
  /**
   * Check if the password to use for wallet operations is set.
   * Use {@link setWalletPassword} to set a new or change an existing password.
   *
   * @returns {Promise<bool>}
   */
  isWalletPasswordSet(): Promise<boolean>;
  /**
   * Verifies the pin for the wallet
   *
   * @param {string} pin - The pin to be verified
   * @returns {Promise<void>}
   */
  verifyPin(pin: string): Promise<void>;
  /**
   * Change the pin used to encrypt the wallet password
   *
   * @param {string} pin - The old pin
   * @param {string} new_pin - The new pin to be set for the wallet
   * @returns {Promise<void>}
   */
  resetPin(pin: string, new_pin: string): Promise<void>;
  /**
   * Sends the given amount to the given address
   *
   * @param {string} pin - The pin for verification
   * @param {string} address - The address of the receiver
   * @param {number} amount - The amount to send in the selected currency
   * @param {Uint8Array | undefined} data - The data associated with the transaction. Optional.
   * @returns {Promise<string>} the transaction id.
   */
  sendAmount(pin: string, address: string, amount: number, data?: Uint8Array | null): Promise<string>;
  /**
   * Estimates the amount of gas required to execute the transaction.
   *
   * @param {string} pin - The pin for verification
   * @param {string} address - The address of the receiver
   * @param {number} amount - The amount to send in the selected currency
   * @param {Uint8Array | undefined} data - The data associated with the transaction. Optional.
   * @return {Promise<string>} The estimated gas as a serialized JSON string
   */
  estimateGas(pin: string, address: string, amount: number, data?: Uint8Array | null): Promise<GasCostEstimation>;
  /**
   * Gets the detailed lists of purchases (COMPLIMENTS and PURCHASES)
   *
   * @param {number} start - The start page
   * @param {number} limit - The limit per page
   *
   * @returns {Promise<TxList>} The details of the created purchases
   */
  getTransactionList(start: number, limit: number): Promise<TxList>;
  /**
   * Set the account and index used for deriving the private key from the mnemonic. This is used
   * to have multiple accounts and addresses with a single mnemonic.
   *
   * @param {number} account - The account number
   * @param {number} index - The index number
   *
   * @returns {Promise<void>}
   */
  setWalletAccount(account: number, index: number): Promise<void>;
  /**
   * Gets the current exchange rate for the cryptocurrency to EURO
   *
   * @returns {Promise<number>} The exchange rate as a floating point number
   */
  getExchangeRate(): Promise<number>;
  /**
   * Deletes the user in etopay. Hazmat!
   *
   * @param {string} pin - The wallet pin for confirmation. Optional in case there is an active wallet.
   * @returns {Promise<void>}
   */
  deleteUser(pin?: string | null): Promise<void>;
  /**
   * Gets the detailed lists of wallet transactions
   *
   * @param {pin} pin - The wallet pin
   * @param {string} start - The start page
   * @param {string} limit - The limit per page
   *
   * @returns {Promise<WalletTxInfoList>} The list of wallet transactions
   */
  getWalletTransactionList(pin: string, start: number, limit: number): Promise<WalletTxInfoList>;
  /**
   * Gets the details of a specific wallet transaction
   *
   * @param {pin} pin - The wallet pin
   * @param {string} tx_id - The ID of the transaction to get details for.
   *
   * @returns {Promise<WalletTxInfo} The details of the wallet transaction as a serialized JSON string.
   */
  getWalletTransaction(pin: string, tx_id: string): Promise<WalletTxInfo>;
  /**
   * Updates the IBAN of the user
   *
   * @param {string} pin - The pin for verification
   * @param {string} address - The IBAN number to be updated
   *
   * @returns {Promise<ViviswapAddressDetail>} The details of the added IBAN
   */
  updateIbanViviswap(pin: string, address: string): Promise<ViviswapAddressDetail>;
  /**
   * Gets the IBAN of the user
   *
   * @returns {Promise<ViviswapAddressDetail} The details of the IBAN
   */
  getIbanViviswap(): Promise<ViviswapAddressDetail>;
  /**
   * Creates a payment contract for depositing money in wallet using viviswap [EURO --> Crypto]
   *
   * @param {pin} pin - The wallet pin
   * @returns {Promise<ViviswapDeposit>} The details of the added payment contract
   */
  createDepositWithViviswap(pin: string): Promise<ViviswapDeposit>;
  /**
   * Creates a payment detail for the wallet crypto address in viviswap
   *
   * @param {pin} pin - The wallet pin
   * @returns {Promise<ViviswapAddressDetail>} The details of the added payment detail
   */
  createDetailForViviswap(pin: string): Promise<ViviswapAddressDetail>;
  /**
   * Creates a payment contract for withdrawing money from wallet using viviswap [Crypto --> EUR] and if the pin is provided automatically triggers a withdrawal
   *
   * @param {number} amount - The amount to withdraw from the wallet
   * @param {string | undefined} pin - The pin for verification. Optional.
   * @param {Uint8Array | undefined} data - The associated data with the transaction. Optional.
   *
   * @returns {Promise<ViviswapWithdrawal>} The details of the created payment contract
   */
  createWithdrawalWithViviswap(amount: number, pin?: string | null, data?: Uint8Array | null): Promise<ViviswapWithdrawal>;
  /**
   * Gets the detail of a particular swap(deposit or withdrawal) created at viviswap based on the given order id.
   *
   * @param {string} order_id - The amount to withdraw from the wallet
   *
   * @returns {Promise<Order>} The details of the created order
   */
  getSwapDetails(order_id: string): Promise<Order>;
  /**
   * Gets the detailed lists of swaps (deposit and withdrawal) created at viviswap
   *
   * @param {number} start - The start page
   * @param {number} limit - The limit per page
   *
   * @returns {Promise<OrderList>} The list of created orders
   */
  getSwapList(start: number, limit: number): Promise<OrderList>;
  /**
   * Starts the KYC verification process for viviswap
   *
   * @param {string} mail - The email address of the user as a string.
   * @param {boolean} terms_accepted - The terms of conditions accepted flag for the user as a boolean
   *
   * @returns {Promise<NewViviswapUser>} The new viviswap user
   */
  startKycVerificationForViviswap(mail: string, terms_accepted: boolean): Promise<NewViviswapUser>;
  /**
   * Fetches the KYC details for a user by the viviswap onboarding process
   *
   * @returns {Promise<ViviswapKycStatus>} The KYC details
   */
  getKycDetailsForViviswap(): Promise<ViviswapKycStatus>;
  /**
   * Updates the partial KYC details for the viviswap onboarding process
   *
   * @param {boolean} is_individual - Flag indicating if the user is an individual.
   * @param {boolean} is_pep - Flag indicating if the user is a politically exposed person.
   * @param {boolean} is_us_citizen - Flag indicating if the user is a US citizen.
   * @param {boolean} is_regulatory_disclosure - Flag indicating if the user has made a regulatory disclosure.
   * @param {string} country_of_residence - The country of residence of the user.
   * @param {string} nationality - The nationality of the user.
   * @param {string} full_name - The full name of the user.
   * @param {string} date_of_birth - The date of birth of the user.
   *
   * @returns {Promise<ViviswapPartiallyKycDetails>} The KYC updated details
   */
  updateKycPartiallyStatusForViviswap(is_individual: boolean, is_pep: boolean, is_us_citizen: boolean, is_regulatory_disclosure: boolean, country_of_residence: string, nationality: string, full_name: string, date_of_birth: string): Promise<ViviswapPartiallyKycDetails>;
  /**
   * Submits the partial KYC details for the viviswap onboarding process
   * @returns {Promise<void>}
   */
  submitKycPartiallyStatusForViviswap(): Promise<void>;
  /**
   * Set Viviswap KYC identity details
   *
   * @param {OfficialDocumentType} official_document_type - The type of the official document.
   * @param {string} expiration_date - The expiration date of the official document.
   * @param {string} document_number - The number of the official document.
   * @param {Uint8Array} official_document_front_image_data -  The data of the image of the front of the official document.
   * @param {string} official_document_front_image_filename - The filename (including extension) of the image of the front of the official document.
   * @param {Uint8Array | undefined} official_document_back_image_data - The data of the image of the back of the official document. Leave as empty string to no provide a back image.
   * @param {string | undefined} official_document_back_image_filename - The filename (including extension) of the image of the back of the official document. Leave as empty string to no provide a back image.
   * @param {Uint8Array | undefined} personal_video_data - The data of the 30 second personal video recording.
   * @param {string} personal_video_filename - The filename (including extenstion) of the 30 second personal video recording.
   * @returns {Promise<void>}
   */
  setViviswapKycIdentityDetails(official_document_type: OfficialDocumentType, expiration_date: string, document_number: string, official_document_front_image_data: Uint8Array, official_document_front_image_filename: string, official_document_back_image_data: Uint8Array | null | undefined, official_document_back_image_filename: string | null | undefined, personal_video_data: Uint8Array, personal_video_filename: string): Promise<void>;
  /**
   * Set Viviswap KYC residence details
   *
   * @param {string} country_code - User country code
   * @param {string} region - User region
   * @param {string} zip_code - User zip code
   * @param {string} city - User city
   * @param {string} address_line_1 - User address line 1
   * @param {string} address_line_2 - User address line 2
   * @param {boolean} is_public_entry - Inidcates that a valid public entry of this clients address can be found.
   * @param {string | undefined} public_entry_reference - if `is_public_entry` is `true`, then this must contain the resource link.
   * @param {boolean} has_no_official_document - indicates if the client does not have any document verifying their address.
   * @param {Uint8Array | undefined} official_document_image_data - if `has_no_official_document` is `false`, then this must contain the
   *                                                                 bytes of the document file that verifies that this person is currently living at the address.
   * @param {string | undefined} official_document_image_filename - the filename (including extension) of the document.
   * @returns {Promise<void>}
   */
  setViviswapKycResidenceDetails(country_code: string, region: string, zip_code: string, city: string, address_line_1: string, address_line_2: string, is_public_entry: boolean, public_entry_reference: string | null | undefined, has_no_official_document: boolean, official_document_image_data?: Uint8Array | null, official_document_image_filename?: string | null): Promise<void>;
  /**
   * Get the open AMLA KYC questions
   *
   * @returns {Promise<OpenAmlaQuestions>} A list of the currently open AMLA questions.
   */
  getViviswapKycAmlaOpenQuestions(): Promise<OpenAmlaQuestions>;
  /**
   * Set the answer to an open AMLA KYC question
   *
   * @param {string} question_id - The ID of the question to set the answer to.
   * @param {string} answers - a list of the selected available answers for the question.
   * @param {string | undefined} freetext_answer - an optional free-text answer.
   * @returns {Promise<void>}
   */
  setViviswapKycAmlaAnswer(question_id: string, answers: string[], freetext_answer?: string | null): Promise<void>;
  /**
   * Get the currently open/missing documents for KYC
   *
   * @returns {Promise<OpenDocuments>} A list of the currently open documents.
   */
  getViviswapKycOpenDocuments(): Promise<OpenDocuments>;
  /**
   * Set / upload an open KYC document
   *
   * @param {string} document_id - The ID of the document to upload.
   * @param {string} expiration_date - the expiration date of this document.
   * @param {string} document_number - the official document number.
   * @param {Uint8Array} front_image_data - the image data of the front side of the document.
   * @param {string} front_image_filename - the filename (including extension) of the front side of the document.
   * @param {Uint8Array | undefined} back_image_data - the image data of the back side of the document. Leave empty for not specifying a back side image.
   * @param {string} back_image_filename - the filename (including extension) of the back side of the document. Leave empty for not specifying a back side image.
   * @returns {Promise<void>}
   */
  setViviswapKycDocument(document_id: string, expiration_date: string, document_number: string, front_image_data?: Uint8Array | null, front_image_filename?: string | null, back_image_data?: Uint8Array | null, back_image_filename?: string | null): Promise<void>;
  /**
   * Get the recovery share.
   *
   * @returns {Promise<string?>} The recovery share as a string, or `undefined` if none exists.
   */
  getRecoveryShare(): Promise<string | undefined>;
  /**
   * Set the recovery share.
   *
   * @param {string} share The recovery share to set.
   * @returns {Promise<void>}
   */
  setRecoveryShare(share: string): Promise<void>;
  /**
   * Get the preferred network.
   *
   * @returns {Promise<String?>} The id of preferred network id, or `undefined` if none exists.
   */
  getPreferredNetwork(): Promise<string | undefined>;
  /**
   * Set the preferred network.
   *
   * @param {String?} network - the id of the network, or null to reset it.
   *
   * @returns {Promise<()>}
   */
  setPreferredNetwork(network?: string | null): Promise<void>;
  /**
   * Get sdk build information.
   *
   * @returns {Promise<string?>} The sdk build information as a string.
   */
  getBuildInfo(): string;
}
/**
 * Gas estimation (EIP-1559)
 */
export class GasCostEstimation {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * The maximum fee the sender is willing to pay per unit of gas.
   */
  max_fee_per_gas: bigint;
  /**
   * The maximum tip the sender is willing to pay to miners (in EIP-1559).
   */
  max_priority_fee_per_gas: bigint;
  /**
   * The maximum amount of gas that the transaction can consume.
   */
  gas_limit: bigint;
}
export class KycAmlaQuestion {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * The unique ID of this question.
   */
  id: string;
  /**
   * The question the user has to answer.
   */
  question: string;
  /**
   * A list of available answers that the user can choose from.
   */
  possible_answers: string[];
  /**
   * Indicator if this question allows free text answers.
   */
  is_free_text: boolean;
  /**
   * The minumum number of answers (including the free-text answer) that are required.
   */
  min_answers: number;
  /**
   * The maximum number of answers (including the free-text answer) that are allowed.
   */
  max_answers: number;
}
export class KycOpenDocument {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  id: string;
  is_back_image_required: boolean;
  type: string;
  description: string;
}
export class Network {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  key: string;
  is_testnet: boolean;
  display_name: string;
  display_symbol: string;
  coin_type: number;
  node_urls: string[];
  decimals: number;
  can_do_purchases: boolean;
  protocol_type: Protocol;
  get protocol_chain_id(): bigint | undefined;
  set protocol_chain_id(value: bigint | null | undefined);
  get protocol_contract_address(): string | undefined;
  set protocol_contract_address(value: string | null | undefined);
  block_explorer_url: string;
}
export class NewCaseIdResponse {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * New Postident case id
   */
  case_id: string;
  /**
   * Username
   */
  case_url: string;
}
export class NewViviswapUser {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Username of new viviswap user
   */
  username: string;
}
export class OpenAmlaQuestions {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  questions: KycAmlaQuestion[];
}
export class OpenDocuments {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  documents: KycOpenDocument[];
}
export class Order {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  id: string;
  is_payed_out: boolean;
  is_approved: boolean;
  is_canceled: boolean;
  fees_amount_eur: number;
  crypto_fees: number;
  contract_id: string;
  incoming_payment_method_id: string;
  incoming_payment_method_currency: string;
  incoming_amount: number;
  incoming_course: number;
  outgoing_payment_method_id: string;
  outgoing_payment_method_currency: string;
  outgoing_amount: number;
  outgoing_course: number;
  get refund_amount(): number | undefined;
  set refund_amount(value: number | null | undefined);
  get refund_course(): number | undefined;
  set refund_course(value: number | null | undefined);
  get refund_payment_method_id(): string | undefined;
  set refund_payment_method_id(value: string | null | undefined);
  status: number;
  creation_date: string;
  get incoming_payment_detail(): PaymentDetail | undefined;
  set incoming_payment_detail(value: PaymentDetail | null | undefined);
  get outgoing_payment_detail(): PaymentDetail | undefined;
  set outgoing_payment_detail(value: PaymentDetail | null | undefined);
  get refund_payment_detail(): PaymentDetail | undefined;
  set refund_payment_detail(value: PaymentDetail | null | undefined);
}
/**
 * Orders list
 */
export class OrderList {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  orders: Order[];
}
export class PaymentDetail {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  id: string;
  address: string;
  get is_verified(): boolean | undefined;
  set is_verified(value: boolean | null | undefined);
}
export class PurchaseDetails {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * The main address where the fees goes to.
   */
  main_address: string;
  /**
   * The amount to be paid.
   */
  amount: number;
  /**
   * The status of transaction
   */
  status: TxStatus;
  /**
   * Transaction invalid reasons
   */
  invalid_reasons: string[];
}
export class TxInfo {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Tx creation date, if available
   */
  get date(): string | undefined;
  /**
   * Tx creation date, if available
   */
  set date(value: string | null | undefined);
  /**
   * sender of the transaction
   */
  sender: string;
  /**
   * receiver of the transaction
   */
  receiver: string;
  /**
   * etopay reference id for the transaction
   */
  reference_id: string;
  /**
   * Application specific metadata attached to the tx
   */
  get application_metadata(): ApplicationMetadata | undefined;
  /**
   * Application specific metadata attached to the tx
   */
  set application_metadata(value: ApplicationMetadata | null | undefined);
  /**
   * Amount of transfer
   */
  amount: number;
  /**
   * Currency of transfer
   */
  currency: string;
  /**
   * Status of the transfer
   */
  status: TxStatus;
  /**
   * The transaction hash on the network
   */
  get transaction_hash(): string | undefined;
  /**
   * The transaction hash on the network
   */
  set transaction_hash(value: string | null | undefined);
  /**
   * Exchange rate
   */
  course: number;
  /**
   * Reasons in case of invalid tx
   */
  invalid_reasons: string[];
}
export class TxList {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  txs: TxInfo[];
}
export class ViviswapAddressDetail {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * the unique id of the address detail
   */
  id: string;
  /**
   * the address used in the detail
   */
  address: string;
  /**
   * the status from viviswap, whether the address is verified
   */
  is_verified: boolean;
}
export class ViviswapDeposit {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * The unique UUID of the contract
   */
  contract_id: string;
  /**
   * The deposit address (crypto) where the swap will put the funds from fiat
   */
  deposit_address: string;
  /**
   * The details of the deposit (for the user)
   */
  details: ViviswapDepositDetails;
}
export class ViviswapDepositDetails {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * The reference to be entered by the user in his SEPA bank transfer
   */
  reference: string;
  /**
   * The name of the beneficiary receiving the SEPA transfer
   */
  beneficiary: string;
  /**
   * The name of the bank of the beneficiary
   */
  name_of_bank: string;
  /**
   * The address of the bank of the beneficiary
   */
  address_of_bank: string;
  /**
   * The IBAN of the beneficiary
   */
  iban: string;
  /**
   * The BIC/SWIFT code for the SEPA transfer
   */
  bic: string;
}
export class ViviswapKycStatus {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * full name of the user
   */
  full_name: string;
  /**
   * the current submission step in the KYC onboarding process for the user
   */
  submission_step: ViviswapVerificationStep;
  /**
   * the current verified step in the KYC onboarding process for the user
   */
  verified_step: ViviswapVerificationStep;
  /**
   * the user verification status
   */
  verification_status: ViviswapVerificationStatus;
  /**
   * The monthly swap limit in euros
   */
  monthly_limit_eur: number;
}
export class ViviswapPartiallyKycDetails {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Is the user an individual
   */
  get is_individual(): boolean | undefined;
  /**
   * Is the user an individual
   */
  set is_individual(value: boolean | null | undefined);
  /**
   * Is the user a politically exposed person
   */
  get is_pep(): boolean | undefined;
  /**
   * Is the user a politically exposed person
   */
  set is_pep(value: boolean | null | undefined);
  /**
   * Is the user a US citizen
   */
  get is_us_citizen(): boolean | undefined;
  /**
   * Is the user a US citizen
   */
  set is_us_citizen(value: boolean | null | undefined);
  /**
   * Is the regulatory disclosure confirmed by user
   */
  get is_regulatory_disclosure(): boolean | undefined;
  /**
   * Is the regulatory disclosure confirmed by user
   */
  set is_regulatory_disclosure(value: boolean | null | undefined);
  /**
   * The country of tax residence of the user
   */
  get country_of_residence(): string | undefined;
  /**
   * The country of tax residence of the user
   */
  set country_of_residence(value: string | null | undefined);
  /**
   * The user's nationality
   */
  get nationality(): string | undefined;
  /**
   * The user's nationality
   */
  set nationality(value: string | null | undefined);
  /**
   * The full name of the user as per his legal documents
   */
  get full_name(): string | undefined;
  /**
   * The full name of the user as per his legal documents
   */
  set full_name(value: string | null | undefined);
  /**
   * The date of birth of the user as per his legal documents
   */
  get date_of_birth(): string | undefined;
  /**
   * The date of birth of the user as per his legal documents
   */
  set date_of_birth(value: string | null | undefined);
}
/**
 * The viviswap withdrawal contract information
 */
export class ViviswapWithdrawal {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * The unique UUID to track the withdrawal contract
   */
  contract_id: string;
  /**
   * The deposit address, in this case the IBAN of the user, where fiat will be deposited.
   */
  deposit_address: string;
  /**
   * The details of the withdrawal
   */
  details: ViviswapWithdrawalDetails;
}
/**
 * Viviswap withdrawal details for crypto to FIAT swap
 */
export class ViviswapWithdrawalDetails {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * The reference used by viviswap for the SEPA transfer
   */
  reference: string;
  /**
   * The id of the unique wallet internal to viviswap
   */
  wallet_id: string;
  /**
   * The crypto address of viviswap where the crypto swap is to be sent
   */
  crypto_address: string;
}
export class WalletTxInfo {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Tx creation date, if available
   */
  date: string;
  /**
   * Contains block number / id
   */
  get block_number(): bigint | undefined;
  /**
   * Contains block number / id
   */
  set block_number(value: bigint | null | undefined);
  /**
   * Contains block hash
   */
  get block_hash(): string | undefined;
  /**
   * Contains block hash
   */
  set block_hash(value: string | null | undefined);
  /**
   * transaction id for particular transaction
   */
  transaction_hash: string;
  /**
   * The sender of the transaction
   */
  sender: string;
  /**
   * The receiver address
   */
  receiver: string;
  /**
   * Amount of transfer
   */
  amount: number;
  /**
   * either SMR or IOTA
   */
  network_key: string;
  /**
   * Status of the transfer
   */
  status: WalletTxStatus;
  /**
   * Url of network explorer
   */
  get explorer_url(): string | undefined;
  /**
   * Url of network explorer
   */
  set explorer_url(value: string | null | undefined);
}
export class WalletTxInfoList {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  transactions: WalletTxInfo[];
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_newcaseidresponse_free: (a: number, b: number) => void;
  readonly __wbg_casedetailsresponse_free: (a: number, b: number) => void;
  readonly __wbg_get_casedetailsresponse_archived: (a: number) => number;
  readonly __wbg_set_casedetailsresponse_archived: (a: number, b: number) => void;
  readonly __wbg_purchasedetails_free: (a: number, b: number) => void;
  readonly __wbg_set_purchasedetails_main_address: (a: number, b: number, c: number) => void;
  readonly __wbg_get_purchasedetails_amount: (a: number) => number;
  readonly __wbg_set_purchasedetails_amount: (a: number, b: number) => void;
  readonly __wbg_get_purchasedetails_status: (a: number) => number;
  readonly __wbg_set_purchasedetails_status: (a: number, b: number) => void;
  readonly __wbg_get_purchasedetails_invalid_reasons: (a: number) => [number, number];
  readonly __wbg_network_free: (a: number, b: number) => void;
  readonly __wbg_get_network_key: (a: number) => [number, number];
  readonly __wbg_set_network_key: (a: number, b: number, c: number) => void;
  readonly __wbg_get_network_is_testnet: (a: number) => number;
  readonly __wbg_set_network_is_testnet: (a: number, b: number) => void;
  readonly __wbg_get_network_display_name: (a: number) => [number, number];
  readonly __wbg_set_network_display_name: (a: number, b: number, c: number) => void;
  readonly __wbg_get_network_display_symbol: (a: number) => [number, number];
  readonly __wbg_set_network_display_symbol: (a: number, b: number, c: number) => void;
  readonly __wbg_get_network_coin_type: (a: number) => number;
  readonly __wbg_set_network_coin_type: (a: number, b: number) => void;
  readonly __wbg_get_network_node_urls: (a: number) => [number, number];
  readonly __wbg_set_network_node_urls: (a: number, b: number, c: number) => void;
  readonly __wbg_get_network_decimals: (a: number) => number;
  readonly __wbg_set_network_decimals: (a: number, b: number) => void;
  readonly __wbg_get_network_can_do_purchases: (a: number) => number;
  readonly __wbg_set_network_can_do_purchases: (a: number, b: number) => void;
  readonly __wbg_get_network_protocol_type: (a: number) => number;
  readonly __wbg_set_network_protocol_type: (a: number, b: number) => void;
  readonly __wbg_get_network_protocol_chain_id: (a: number) => [number, bigint];
  readonly __wbg_set_network_protocol_chain_id: (a: number, b: number, c: bigint) => void;
  readonly __wbg_get_network_protocol_contract_address: (a: number) => [number, number];
  readonly __wbg_set_network_protocol_contract_address: (a: number, b: number, c: number) => void;
  readonly __wbg_get_network_block_explorer_url: (a: number) => [number, number];
  readonly __wbg_set_network_block_explorer_url: (a: number, b: number, c: number) => void;
  readonly __wbg_txlist_free: (a: number, b: number) => void;
  readonly __wbg_get_txlist_txs: (a: number) => [number, number];
  readonly __wbg_set_txlist_txs: (a: number, b: number, c: number) => void;
  readonly __wbg_txinfo_free: (a: number, b: number) => void;
  readonly __wbg_get_txinfo_date: (a: number) => [number, number];
  readonly __wbg_set_txinfo_date: (a: number, b: number, c: number) => void;
  readonly __wbg_get_txinfo_sender: (a: number) => [number, number];
  readonly __wbg_set_txinfo_sender: (a: number, b: number, c: number) => void;
  readonly __wbg_get_txinfo_receiver: (a: number) => [number, number];
  readonly __wbg_set_txinfo_receiver: (a: number, b: number, c: number) => void;
  readonly __wbg_get_txinfo_reference_id: (a: number) => [number, number];
  readonly __wbg_set_txinfo_reference_id: (a: number, b: number, c: number) => void;
  readonly __wbg_get_txinfo_application_metadata: (a: number) => number;
  readonly __wbg_set_txinfo_application_metadata: (a: number, b: number) => void;
  readonly __wbg_get_txinfo_amount: (a: number) => number;
  readonly __wbg_set_txinfo_amount: (a: number, b: number) => void;
  readonly __wbg_get_txinfo_currency: (a: number) => [number, number];
  readonly __wbg_set_txinfo_currency: (a: number, b: number, c: number) => void;
  readonly __wbg_get_txinfo_status: (a: number) => number;
  readonly __wbg_set_txinfo_status: (a: number, b: number) => void;
  readonly __wbg_get_txinfo_course: (a: number) => number;
  readonly __wbg_set_txinfo_course: (a: number, b: number) => void;
  readonly __wbg_get_txinfo_invalid_reasons: (a: number) => [number, number];
  readonly __wbg_set_txinfo_invalid_reasons: (a: number, b: number, c: number) => void;
  readonly __wbg_applicationmetadata_free: (a: number, b: number) => void;
  readonly __wbg_get_applicationmetadata_product_hash: (a: number) => [number, number];
  readonly __wbg_set_applicationmetadata_product_hash: (a: number, b: number, c: number) => void;
  readonly __wbg_get_applicationmetadata_reason: (a: number) => [number, number];
  readonly __wbg_set_applicationmetadata_reason: (a: number, b: number, c: number) => void;
  readonly __wbg_get_applicationmetadata_purchase_model: (a: number) => [number, number];
  readonly __wbg_set_applicationmetadata_purchase_model: (a: number, b: number, c: number) => void;
  readonly __wbg_get_applicationmetadata_app_data: (a: number) => [number, number];
  readonly __wbg_set_applicationmetadata_app_data: (a: number, b: number, c: number) => void;
  readonly __wbg_gascostestimation_free: (a: number, b: number) => void;
  readonly __wbg_get_gascostestimation_max_fee_per_gas: (a: number) => [bigint, bigint];
  readonly __wbg_set_gascostestimation_max_fee_per_gas: (a: number, b: bigint, c: bigint) => void;
  readonly __wbg_get_gascostestimation_max_priority_fee_per_gas: (a: number) => [bigint, bigint];
  readonly __wbg_set_gascostestimation_max_priority_fee_per_gas: (a: number, b: bigint, c: bigint) => void;
  readonly __wbg_get_gascostestimation_gas_limit: (a: number) => bigint;
  readonly __wbg_set_gascostestimation_gas_limit: (a: number, b: bigint) => void;
  readonly __wbg_wallettxinfo_free: (a: number, b: number) => void;
  readonly __wbg_set_wallettxinfo_date: (a: number, b: number, c: number) => void;
  readonly __wbg_get_wallettxinfo_block_hash: (a: number) => [number, number];
  readonly __wbg_set_wallettxinfo_block_hash: (a: number, b: number, c: number) => void;
  readonly __wbg_set_wallettxinfo_sender: (a: number, b: number, c: number) => void;
  readonly __wbg_get_wallettxinfo_amount: (a: number) => number;
  readonly __wbg_set_wallettxinfo_amount: (a: number, b: number) => void;
  readonly __wbg_set_wallettxinfo_network_key: (a: number, b: number, c: number) => void;
  readonly __wbg_get_wallettxinfo_status: (a: number) => number;
  readonly __wbg_set_wallettxinfo_status: (a: number, b: number) => void;
  readonly __wbg_set_wallettxinfo_explorer_url: (a: number, b: number, c: number) => void;
  readonly __wbg_wallettxinfolist_free: (a: number, b: number) => void;
  readonly __wbg_get_wallettxinfolist_transactions: (a: number) => [number, number];
  readonly __wbg_set_wallettxinfolist_transactions: (a: number, b: number, c: number) => void;
  readonly __wbg_viviswapaddressdetail_free: (a: number, b: number) => void;
  readonly __wbg_viviswapdeposit_free: (a: number, b: number) => void;
  readonly __wbg_get_viviswapdeposit_details: (a: number) => number;
  readonly __wbg_set_viviswapdeposit_details: (a: number, b: number) => void;
  readonly __wbg_viviswapdepositdetails_free: (a: number, b: number) => void;
  readonly __wbg_get_viviswapdepositdetails_iban: (a: number) => [number, number];
  readonly __wbg_set_viviswapdepositdetails_iban: (a: number, b: number, c: number) => void;
  readonly __wbg_get_viviswapdepositdetails_bic: (a: number) => [number, number];
  readonly __wbg_set_viviswapdepositdetails_bic: (a: number, b: number, c: number) => void;
  readonly __wbg_viviswapwithdrawaldetails_free: (a: number, b: number) => void;
  readonly __wbg_viviswapwithdrawal_free: (a: number, b: number) => void;
  readonly __wbg_get_viviswapwithdrawal_details: (a: number) => number;
  readonly __wbg_set_viviswapwithdrawal_details: (a: number, b: number) => void;
  readonly __wbg_order_free: (a: number, b: number) => void;
  readonly __wbg_get_order_id: (a: number) => [number, number];
  readonly __wbg_set_order_id: (a: number, b: number, c: number) => void;
  readonly __wbg_get_order_is_payed_out: (a: number) => number;
  readonly __wbg_set_order_is_payed_out: (a: number, b: number) => void;
  readonly __wbg_get_order_is_approved: (a: number) => number;
  readonly __wbg_set_order_is_approved: (a: number, b: number) => void;
  readonly __wbg_get_order_is_canceled: (a: number) => number;
  readonly __wbg_set_order_is_canceled: (a: number, b: number) => void;
  readonly __wbg_get_order_fees_amount_eur: (a: number) => number;
  readonly __wbg_set_order_fees_amount_eur: (a: number, b: number) => void;
  readonly __wbg_get_order_crypto_fees: (a: number) => number;
  readonly __wbg_set_order_crypto_fees: (a: number, b: number) => void;
  readonly __wbg_get_order_contract_id: (a: number) => [number, number];
  readonly __wbg_set_order_contract_id: (a: number, b: number, c: number) => void;
  readonly __wbg_get_order_incoming_payment_method_id: (a: number) => [number, number];
  readonly __wbg_set_order_incoming_payment_method_id: (a: number, b: number, c: number) => void;
  readonly __wbg_get_order_incoming_payment_method_currency: (a: number) => [number, number];
  readonly __wbg_set_order_incoming_payment_method_currency: (a: number, b: number, c: number) => void;
  readonly __wbg_get_order_incoming_amount: (a: number) => number;
  readonly __wbg_set_order_incoming_amount: (a: number, b: number) => void;
  readonly __wbg_get_order_incoming_course: (a: number) => number;
  readonly __wbg_set_order_incoming_course: (a: number, b: number) => void;
  readonly __wbg_get_order_outgoing_payment_method_id: (a: number) => [number, number];
  readonly __wbg_set_order_outgoing_payment_method_id: (a: number, b: number, c: number) => void;
  readonly __wbg_get_order_outgoing_payment_method_currency: (a: number) => [number, number];
  readonly __wbg_set_order_outgoing_payment_method_currency: (a: number, b: number, c: number) => void;
  readonly __wbg_get_order_outgoing_amount: (a: number) => number;
  readonly __wbg_set_order_outgoing_amount: (a: number, b: number) => void;
  readonly __wbg_get_order_outgoing_course: (a: number) => number;
  readonly __wbg_set_order_outgoing_course: (a: number, b: number) => void;
  readonly __wbg_get_order_refund_amount: (a: number) => number;
  readonly __wbg_set_order_refund_amount: (a: number, b: number) => void;
  readonly __wbg_get_order_refund_course: (a: number) => number;
  readonly __wbg_set_order_refund_course: (a: number, b: number) => void;
  readonly __wbg_get_order_refund_payment_method_id: (a: number) => [number, number];
  readonly __wbg_set_order_refund_payment_method_id: (a: number, b: number, c: number) => void;
  readonly __wbg_get_order_status: (a: number) => number;
  readonly __wbg_set_order_status: (a: number, b: number) => void;
  readonly __wbg_get_order_creation_date: (a: number) => [number, number];
  readonly __wbg_set_order_creation_date: (a: number, b: number, c: number) => void;
  readonly __wbg_get_order_incoming_payment_detail: (a: number) => number;
  readonly __wbg_set_order_incoming_payment_detail: (a: number, b: number) => void;
  readonly __wbg_get_order_outgoing_payment_detail: (a: number) => number;
  readonly __wbg_set_order_outgoing_payment_detail: (a: number, b: number) => void;
  readonly __wbg_get_order_refund_payment_detail: (a: number) => number;
  readonly __wbg_set_order_refund_payment_detail: (a: number, b: number) => void;
  readonly __wbg_orderlist_free: (a: number, b: number) => void;
  readonly __wbg_get_orderlist_orders: (a: number) => [number, number];
  readonly __wbg_set_orderlist_orders: (a: number, b: number, c: number) => void;
  readonly __wbg_paymentdetail_free: (a: number, b: number) => void;
  readonly __wbg_get_paymentdetail_is_verified: (a: number) => number;
  readonly __wbg_set_paymentdetail_is_verified: (a: number, b: number) => void;
  readonly __wbg_newviviswapuser_free: (a: number, b: number) => void;
  readonly __wbg_viviswapkycstatus_free: (a: number, b: number) => void;
  readonly __wbg_get_viviswapkycstatus_submission_step: (a: number) => number;
  readonly __wbg_set_viviswapkycstatus_submission_step: (a: number, b: number) => void;
  readonly __wbg_get_viviswapkycstatus_verified_step: (a: number) => number;
  readonly __wbg_set_viviswapkycstatus_verified_step: (a: number, b: number) => void;
  readonly __wbg_get_viviswapkycstatus_verification_status: (a: number) => number;
  readonly __wbg_set_viviswapkycstatus_verification_status: (a: number, b: number) => void;
  readonly __wbg_get_viviswapkycstatus_monthly_limit_eur: (a: number) => number;
  readonly __wbg_set_viviswapkycstatus_monthly_limit_eur: (a: number, b: number) => void;
  readonly __wbg_viviswappartiallykycdetails_free: (a: number, b: number) => void;
  readonly __wbg_get_viviswappartiallykycdetails_is_individual: (a: number) => number;
  readonly __wbg_set_viviswappartiallykycdetails_is_individual: (a: number, b: number) => void;
  readonly __wbg_get_viviswappartiallykycdetails_is_pep: (a: number) => number;
  readonly __wbg_set_viviswappartiallykycdetails_is_pep: (a: number, b: number) => void;
  readonly __wbg_get_viviswappartiallykycdetails_is_us_citizen: (a: number) => number;
  readonly __wbg_set_viviswappartiallykycdetails_is_us_citizen: (a: number, b: number) => void;
  readonly __wbg_get_viviswappartiallykycdetails_is_regulatory_disclosure: (a: number) => number;
  readonly __wbg_set_viviswappartiallykycdetails_is_regulatory_disclosure: (a: number, b: number) => void;
  readonly __wbg_get_viviswappartiallykycdetails_country_of_residence: (a: number) => [number, number];
  readonly __wbg_set_viviswappartiallykycdetails_country_of_residence: (a: number, b: number, c: number) => void;
  readonly __wbg_get_viviswappartiallykycdetails_nationality: (a: number) => [number, number];
  readonly __wbg_set_viviswappartiallykycdetails_nationality: (a: number, b: number, c: number) => void;
  readonly __wbg_get_viviswappartiallykycdetails_full_name: (a: number) => [number, number];
  readonly __wbg_set_viviswappartiallykycdetails_full_name: (a: number, b: number, c: number) => void;
  readonly __wbg_get_viviswappartiallykycdetails_date_of_birth: (a: number) => [number, number];
  readonly __wbg_set_viviswappartiallykycdetails_date_of_birth: (a: number, b: number, c: number) => void;
  readonly __wbg_openamlaquestions_free: (a: number, b: number) => void;
  readonly __wbg_get_openamlaquestions_questions: (a: number) => [number, number];
  readonly __wbg_set_openamlaquestions_questions: (a: number, b: number, c: number) => void;
  readonly __wbg_kycamlaquestion_free: (a: number, b: number) => void;
  readonly __wbg_get_kycamlaquestion_possible_answers: (a: number) => [number, number];
  readonly __wbg_set_kycamlaquestion_possible_answers: (a: number, b: number, c: number) => void;
  readonly __wbg_get_kycamlaquestion_is_free_text: (a: number) => number;
  readonly __wbg_set_kycamlaquestion_is_free_text: (a: number, b: number) => void;
  readonly __wbg_get_kycamlaquestion_min_answers: (a: number) => number;
  readonly __wbg_set_kycamlaquestion_min_answers: (a: number, b: number) => void;
  readonly __wbg_get_kycamlaquestion_max_answers: (a: number) => number;
  readonly __wbg_set_kycamlaquestion_max_answers: (a: number, b: number) => void;
  readonly __wbg_kycopendocument_free: (a: number, b: number) => void;
  readonly __wbg_get_kycopendocument_is_back_image_required: (a: number) => number;
  readonly __wbg_set_kycopendocument_is_back_image_required: (a: number, b: number) => void;
  readonly __wbg_opendocuments_free: (a: number, b: number) => void;
  readonly __wbg_get_opendocuments_documents: (a: number) => [number, number];
  readonly __wbg_set_opendocuments_documents: (a: number, b: number, c: number) => void;
  readonly __wbg_set_newcaseidresponse_case_id: (a: number, b: number, c: number) => void;
  readonly __wbg_set_newcaseidresponse_case_url: (a: number, b: number, c: number) => void;
  readonly __wbg_set_casedetailsresponse_case_id: (a: number, b: number, c: number) => void;
  readonly __wbg_set_casedetailsresponse_status: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapaddressdetail_id: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapaddressdetail_address: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapdeposit_contract_id: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapdeposit_deposit_address: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapdepositdetails_reference: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapdepositdetails_beneficiary: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapdepositdetails_name_of_bank: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapdepositdetails_address_of_bank: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapwithdrawaldetails_reference: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapwithdrawaldetails_wallet_id: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapwithdrawaldetails_crypto_address: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapwithdrawal_contract_id: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapwithdrawal_deposit_address: (a: number, b: number, c: number) => void;
  readonly __wbg_set_wallettxinfo_transaction_hash: (a: number, b: number, c: number) => void;
  readonly __wbg_set_wallettxinfo_receiver: (a: number, b: number, c: number) => void;
  readonly __wbg_set_paymentdetail_id: (a: number, b: number, c: number) => void;
  readonly __wbg_set_paymentdetail_address: (a: number, b: number, c: number) => void;
  readonly __wbg_set_newviviswapuser_username: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapkycstatus_full_name: (a: number, b: number, c: number) => void;
  readonly __wbg_set_kycamlaquestion_id: (a: number, b: number, c: number) => void;
  readonly __wbg_set_kycamlaquestion_question: (a: number, b: number, c: number) => void;
  readonly __wbg_set_kycopendocument_id: (a: number, b: number, c: number) => void;
  readonly __wbg_set_kycopendocument_type: (a: number, b: number, c: number) => void;
  readonly __wbg_set_kycopendocument_description: (a: number, b: number, c: number) => void;
  readonly __wbg_set_purchasedetails_invalid_reasons: (a: number, b: number, c: number) => void;
  readonly __wbg_set_viviswapaddressdetail_is_verified: (a: number, b: number) => void;
  readonly __wbg_get_newcaseidresponse_case_id: (a: number) => [number, number];
  readonly __wbg_get_newcaseidresponse_case_url: (a: number) => [number, number];
  readonly __wbg_get_purchasedetails_main_address: (a: number) => [number, number];
  readonly __wbg_get_casedetailsresponse_case_id: (a: number) => [number, number];
  readonly __wbg_get_casedetailsresponse_status: (a: number) => [number, number];
  readonly __wbg_get_viviswapaddressdetail_id: (a: number) => [number, number];
  readonly __wbg_get_viviswapaddressdetail_address: (a: number) => [number, number];
  readonly __wbg_get_viviswapdeposit_contract_id: (a: number) => [number, number];
  readonly __wbg_get_viviswapdeposit_deposit_address: (a: number) => [number, number];
  readonly __wbg_get_viviswapdepositdetails_reference: (a: number) => [number, number];
  readonly __wbg_get_viviswapdepositdetails_beneficiary: (a: number) => [number, number];
  readonly __wbg_get_viviswapdepositdetails_name_of_bank: (a: number) => [number, number];
  readonly __wbg_get_viviswapdepositdetails_address_of_bank: (a: number) => [number, number];
  readonly __wbg_get_viviswapwithdrawaldetails_reference: (a: number) => [number, number];
  readonly __wbg_get_viviswapwithdrawaldetails_wallet_id: (a: number) => [number, number];
  readonly __wbg_get_viviswapwithdrawaldetails_crypto_address: (a: number) => [number, number];
  readonly __wbg_get_viviswapwithdrawal_contract_id: (a: number) => [number, number];
  readonly __wbg_get_viviswapwithdrawal_deposit_address: (a: number) => [number, number];
  readonly __wbg_get_wallettxinfo_date: (a: number) => [number, number];
  readonly __wbg_get_wallettxinfo_transaction_hash: (a: number) => [number, number];
  readonly __wbg_get_wallettxinfo_sender: (a: number) => [number, number];
  readonly __wbg_get_wallettxinfo_receiver: (a: number) => [number, number];
  readonly __wbg_get_wallettxinfo_network_key: (a: number) => [number, number];
  readonly __wbg_get_paymentdetail_id: (a: number) => [number, number];
  readonly __wbg_get_paymentdetail_address: (a: number) => [number, number];
  readonly __wbg_get_newviviswapuser_username: (a: number) => [number, number];
  readonly __wbg_get_viviswapkycstatus_full_name: (a: number) => [number, number];
  readonly __wbg_get_kycamlaquestion_id: (a: number) => [number, number];
  readonly __wbg_get_kycamlaquestion_question: (a: number) => [number, number];
  readonly __wbg_get_kycopendocument_id: (a: number) => [number, number];
  readonly __wbg_get_kycopendocument_type: (a: number) => [number, number];
  readonly __wbg_get_kycopendocument_description: (a: number) => [number, number];
  readonly __wbg_set_txinfo_transaction_hash: (a: number, b: number, c: number) => void;
  readonly __wbg_get_wallettxinfo_block_number: (a: number) => [number, bigint];
  readonly __wbg_set_wallettxinfo_block_number: (a: number, b: number, c: bigint) => void;
  readonly __wbg_get_txinfo_transaction_hash: (a: number) => [number, number];
  readonly __wbg_get_wallettxinfo_explorer_url: (a: number) => [number, number];
  readonly __wbg_get_viviswapaddressdetail_is_verified: (a: number) => number;
  readonly __wbg_etopaysdk_free: (a: number, b: number) => void;
  readonly etopaysdk_new: () => number;
  readonly etopaysdk_setConfig: (a: number, b: number, c: number) => any;
  readonly etopaysdk_setNetwork: (a: number, b: number, c: number) => any;
  readonly etopaysdk_getNetworks: (a: number) => any;
  readonly etopaysdk_initLogger: (a: number, b: number) => void;
  readonly etopaysdk_createNewUser: (a: number, b: number, c: number) => any;
  readonly etopaysdk_initializeUser: (a: number, b: number, c: number) => any;
  readonly etopaysdk_refreshAccessToken: (a: number, b: number, c: number) => any;
  readonly etopaysdk_isKycVerified: (a: number, b: number, c: number) => any;
  readonly etopaysdk_createNewWallet: (a: number, b: number, c: number) => any;
  readonly etopaysdk_createWalletFromMnemonic: (a: number, b: number, c: number, d: number, e: number) => any;
  readonly etopaysdk_createWalletFromBackup: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => any;
  readonly etopaysdk_createWalletBackup: (a: number, b: number, c: number, d: number, e: number) => any;
  readonly etopaysdk_deleteWallet: (a: number, b: number, c: number) => any;
  readonly etopaysdk_verifyMnemonic: (a: number, b: number, c: number, d: number, e: number) => any;
  readonly etopaysdk_generateNewAddress: (a: number, b: number, c: number) => any;
  readonly etopaysdk_getWalletBalance: (a: number, b: number, c: number) => any;
  readonly etopaysdk_startKycVerificationForPostident: (a: number) => any;
  readonly etopaysdk_getKycDetailsForPostident: (a: number) => any;
  readonly etopaysdk_updateKycStatusForPostident: (a: number, b: number, c: number) => any;
  readonly etopaysdk_createPurchaseRequest: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => any;
  readonly etopaysdk_getPurchaseDetails: (a: number, b: number, c: number) => any;
  readonly etopaysdk_confirmPurchaseRequest: (a: number, b: number, c: number, d: number, e: number) => any;
  readonly etopaysdk_setWalletPassword: (a: number, b: number, c: number, d: number, e: number) => any;
  readonly etopaysdk_isWalletPasswordSet: (a: number) => any;
  readonly etopaysdk_verifyPin: (a: number, b: number, c: number) => any;
  readonly etopaysdk_resetPin: (a: number, b: number, c: number, d: number, e: number) => any;
  readonly etopaysdk_sendAmount: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => any;
  readonly etopaysdk_estimateGas: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => any;
  readonly etopaysdk_getTransactionList: (a: number, b: number, c: number) => any;
  readonly etopaysdk_setWalletAccount: (a: number, b: number, c: number) => any;
  readonly etopaysdk_getExchangeRate: (a: number) => any;
  readonly etopaysdk_deleteUser: (a: number, b: number, c: number) => any;
  readonly etopaysdk_getWalletTransactionList: (a: number, b: number, c: number, d: number, e: number) => any;
  readonly etopaysdk_getWalletTransaction: (a: number, b: number, c: number, d: number, e: number) => any;
  readonly etopaysdk_updateIbanViviswap: (a: number, b: number, c: number, d: number, e: number) => any;
  readonly etopaysdk_getIbanViviswap: (a: number) => any;
  readonly etopaysdk_createDepositWithViviswap: (a: number, b: number, c: number) => any;
  readonly etopaysdk_createDetailForViviswap: (a: number, b: number, c: number) => any;
  readonly etopaysdk_createWithdrawalWithViviswap: (a: number, b: number, c: number, d: number, e: number, f: number) => any;
  readonly etopaysdk_getSwapDetails: (a: number, b: number, c: number) => any;
  readonly etopaysdk_getSwapList: (a: number, b: number, c: number) => any;
  readonly etopaysdk_startKycVerificationForViviswap: (a: number, b: number, c: number, d: number) => any;
  readonly etopaysdk_getKycDetailsForViviswap: (a: number) => any;
  readonly etopaysdk_updateKycPartiallyStatusForViviswap: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number) => any;
  readonly etopaysdk_submitKycPartiallyStatusForViviswap: (a: number) => any;
  readonly etopaysdk_setViviswapKycIdentityDetails: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number) => any;
  readonly etopaysdk_setViviswapKycResidenceDetails: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number, s: number, t: number, u: number) => any;
  readonly etopaysdk_getViviswapKycAmlaOpenQuestions: (a: number) => any;
  readonly etopaysdk_setViviswapKycAmlaAnswer: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => any;
  readonly etopaysdk_getViviswapKycOpenDocuments: (a: number) => any;
  readonly etopaysdk_setViviswapKycDocument: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number) => any;
  readonly etopaysdk_getRecoveryShare: (a: number) => any;
  readonly etopaysdk_setRecoveryShare: (a: number, b: number, c: number) => any;
  readonly etopaysdk_getPreferredNetwork: (a: number) => any;
  readonly etopaysdk_setPreferredNetwork: (a: number, b: number, c: number) => any;
  readonly etopaysdk_getBuildInfo: (a: number) => [number, number];
  readonly ring_core_0_17_14__bn_mul_mont: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
  readonly __externref_table_alloc: () => number;
  readonly __wbindgen_export_2: WebAssembly.Table;
  readonly __wbindgen_free: (a: number, b: number, c: number) => void;
  readonly __wbindgen_malloc: (a: number, b: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_export_6: WebAssembly.Table;
  readonly __externref_drop_slice: (a: number, b: number) => void;
  readonly _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hf1b1f6e4c1f58c95: (a: number, b: number) => void;
  readonly _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__heb45861aed7ddaa2: (a: number, b: number) => void;
  readonly closure3503_externref_shim: (a: number, b: number, c: any) => void;
  readonly closure3537_externref_shim: (a: number, b: number, c: any, d: any) => void;
  readonly __wbindgen_start: () => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {{ module: SyncInitInput }} module - Passing `SyncInitInput` directly is deprecated.
*
* @returns {InitOutput}
*/
export function initSync(module: { module: SyncInitInput } | SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {{ module_or_path: InitInput | Promise<InitInput> }} module_or_path - Passing `InitInput` directly is deprecated.
*
* @returns {Promise<InitOutput>}
*/
export default function __wbg_init (module_or_path?: { module_or_path: InitInput | Promise<InitInput> } | InitInput | Promise<InitInput>): Promise<InitOutput>;
